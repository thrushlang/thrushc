// ******************************************************************************************
//
//   MergeSort - Algorithm
//
//   Copyright (c) 2025 Kevin Benavides
//
// ******************************************************************************************

// External declaration for the C printf function, used for printing output to the console.
fn print(fmt: ptr) s32 @public @ignore @extern("printf");

// Merges two sorted subarrays into a single sorted subarray.
// Parameters:
//   arr: A mutable array of 7 unsigned 32-bit integers.
//   left: The starting index of the first subarray (inclusive, signed 32-bit integer).
//   mid: The ending index of the first subarray (inclusive, signed 32-bit integer).
//   right: The ending index of the second subarray (inclusive, signed 32-bit integer).
fn merge(mut arr: mut array[u32; 7], left: s32, mid: s32, right: s32) void {
    local n1: s32 = mid - left + 1; // Size of the left subarray
    local n2: s32 = right - mid;    // Size of the right subarray

    // Create temporary arrays for left and right subarrays
    local mut leftArr: mut array[u32; 7] = fixed[0, 0, 0, 0, 0, 0, 0];
    local mut rightArr: mut array[u32; 7] = fixed[0, 0, 0, 0, 0, 0, 0];

    // Copy data to temporary arrays
    for local mut ic: u64 = 0; ic < n1; ++ic; {
        leftArr[0, ic] = deref arr[0, (left + ic)];
    }

    for local mut jc: u64 = 0; jc < n2; ++jc; {
        rightArr[0, jc] = deref arr[0, (mid + 1 + jc)];
    }

    // Merge the temporary arrays back into arr[left..right]
    local mut i: s32 = 0;     // Index for left subarray
    local mut j: s32 = 0;     // Index for right subarray
    local mut k: s32 = left;  // Index for merged array

    while i < n1 && j < n2 {
        if (deref leftArr[0, i]) <= (deref rightArr[0, j]) {
            arr[0, k] = deref leftArr[0, i];
            i++;
        } else {
            arr[0, k] = deref rightArr[0, j];
            j++;
        }

        k++;
    }

    // Copy remaining elements of leftArr, if any
    while i < n1 {
        arr[0, k] = deref leftArr[0, i];

        i++;
        k++;
    }

    // Copy remaining elements of rightArr, if any
    while j < n2 {
        arr[0, k] = deref rightArr[0, j];

        j++;
        k++;
    }
}

// Recursively sorts the array using the MergeSort algorithm.
// Parameters:
//   arr: A mutable array of 7 unsigned 32-bit integers.
//   left: The starting index of the subarray (inclusive, signed 32-bit integer).
//   right: The ending index of the subarray (inclusive, signed 32-bit integer).
fn mergeSort(arr: mut array[u32; 7], left: s32, right: s32) void {
    if (left < right) { // Proceed only if the subarray has more than one element
        local mid: s32 = left + (right - left) / 2; // Calculate the midpoint
        
        mergeSort(arr, left, mid);                  // Recursively sort the left subarray
        mergeSort(arr, mid + 1, right);             // Recursively sort the right subarray
        merge(arr, left, mid, right);               // Merge the two sorted subarrays
    }
}

// Prints the elements of the array followed by a newline.
// Parameters:
//   arr: A mutable array of 7 unsigned 32-bit integers.
//   size: The number of elements to print (unsigned 32-bit integer).
fn printArray(arr: mut array[u32; 7], size: u32) void {
    for local mut idx: u32 = 0; idx < size; ++idx; { // Iterate over the array from index 0 to size-1
        local content_fmt: str = "%d ";              // Format string for printing an integer
        print(content_fmt as ptr, deref arr[0, idx]);   // Print the current element
    }

    local space: str = "\n";                       // Newline character
    print(space as ptr);                           // Print a newline after the array
}

fn main() u32 {
    local unsorted_array: mut array[u32; 7] = fixed[64, 34, 25, 12, 22, 11, 90]; // Initialize array with 7 elements
    local unsorted_array_fmt: str = "Original array: "; // String for the unsorted array
    local sorted_array_fmt: str = "Sorted array: ";     // String for the sorted array

    print(unsorted_array_fmt as ptr);      // Print "Original array: "
    printArray(unsorted_array, 7);         // Print the unsorted array
    mergeSort(unsorted_array, 0, 6);       // Sort the array (indices 0 to 6)
    print(sorted_array_fmt as ptr);        // Print "Sorted array: "
    printArray(unsorted_array, 7);         // Print the sorted array

    return 0;
}