// ******************************************************************************************
//
//   BubbleSort - Algorithm
//
//   Copyright (c) 2025 Kevin Benavides
//
// ******************************************************************************************

// External declaration for the C printf function, used for printing output to the console.
fn print(fmt: ptr) s32 @public @ignore @extern("printf");

// Swaps two elements in the array at the specified indices i and j.
// Parameters:
//   arr: A mutable array of 7 unsigned 32-bit integers.
//   i: The first index (signed 32-bit integer) for swapping.
//   j: The second index (signed 32-bit integer) for swapping.
fn swap(mut arr: mut array[u32; 7], i: s32, j: s32) void {
    local temp: u32 = deref arr[0, i]; // Store the value at arr[i] in a temporary variable
    arr[0, i as u64] = deref arr[0, j];  // Assign the value at arr[j] to arr[i]
    arr[0, j as u64] = temp;                 // Assign the temporary value to arr[j]
}

// Sorts the array using the Bubble Sort algorithm.
// Parameters:
//   arr: A mutable array of 7 unsigned 32-bit integers.
//   size: The number of elements in the array (signed 32-bit integer).
fn bubbleSort(mut arr: mut array[u32; 7], size: s32) void {
    for local mut i: s32 = 0; i < size - 1; ++i; { // Iterate through the array
        
        local mut swapped: bool = false;           // Flag to optimize for already sorted arrays
        
        for local mut j: s32 = 0; j < size - i - 1; ++j; { // Compare adjacent elements
            if (deref arr[0, j]) > (deref arr[0, (j + 1)]) { // If current element is greater than next
                swap(arr, j, j + 1);                 // Swap them
                swapped = true;                      // Mark that a swap occurred
            }
        }

        if !swapped { // If no swaps occurred, array is sorted, so exit early
            break;
        }
    
    }
}

// Prints the elements of the array followed by a newline.
// Parameters:
//   arr: A mutable array of 7 unsigned 32-bit integers.
//   size: The number of elements to print (unsigned 32-bit integer).
fn printArray(arr: mut array[u32; 7], size: u32) void {
    for local mut idx: u32 = 0; idx < size; ++idx; { // Iterate over the array from index 0 to size-1
        local content_fmt: str = "%d ";              // Format string for printing an integer
        print(content_fmt as ptr, deref arr[0, idx]);   // Print the current element
    }

    local space: str = "\n";                       // Newline character
    print(space as ptr);                           // Print a newline after the array
}

fn main() u32 {
    local unsorted_array: mut array[u32; 7] = fixed[64, 34, 25, 12, 22, 11, 90]; // Initialize array with 7 elements
    local unsorted_array_fmt: str = "Original array: "; // String for the unsorted array
    local sorted_array_fmt: str = "Sorted array: ";     // String for the sorted array

    print(unsorted_array_fmt as ptr);      // Print "Original array: "
    printArray(unsorted_array, 7);         // Print the unsorted array
    bubbleSort(unsorted_array, 7);         // Sort the array
    print(sorted_array_fmt as ptr);        // Print "Sorted array: "
    printArray(unsorted_array, 7);         // Print the sorted array

    return 0;
}